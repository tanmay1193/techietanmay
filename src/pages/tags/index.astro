---
import { getAllPosts, getUniqueTagsWithCount } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";

const allPosts = await getAllPosts();
const allTags = getUniqueTagsWithCount(allPosts);

const meta = {
	description: "A list of all the topics I've written about in my posts",
	title: "All Tags",
};
---

<PageLayout meta={meta}>
	<h1 class="title mb-6" id="h1">Tags</h1>
	<ul class="space-y-6">
		{
			allTags.map(([tag, val]) => (
				<li class="flex items-center gap-x-2">
					<a
						class="cactus-link inline-block"
						data-astro-prefetch
						href={`/tags/${tag}/`}
						title={`View posts with the tag: ${tag}`}
					>
						&#35;{tag}
					</a>
					<span class="inline-block">
						- {val} Post{val > 1 && "s"}
					</span>
				</li>
			))
		}
	</ul>
	<button
		class="hover:border-link fixed end-4 bottom-8 z-90 flex h-10 w-10 translate-y-28 cursor-pointer items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all transition-discrete duration-300 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-8 sm:h-12 sm:w-12 dark:bg-zinc-700"
		data-show="false"
		id="to-top-btn"
	>
		<span class="sr-only">Back to top</span>
		<svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</PageLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("h1") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
